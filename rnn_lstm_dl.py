# -*- coding: utf-8 -*-
"""rnn_lstm_dl.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zSgeV5nDd-YmnY1CgmR5WEwb8zN4kSjM
"""

import torch
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from torch.utils.data import DataLoader, TensorDataset

# Load the dataset
california = fetch_california_housing()
X, y = california.data, california.target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Convert arrays to PyTorch tensors
X_train = torch.tensor(X_train, dtype=torch.float32)
X_test = torch.tensor(X_test, dtype=torch.float32)
y_train = torch.tensor(y_train, dtype=torch.float32)
y_test = torch.tensor(y_test, dtype=torch.float32)

# Create TensorDatasets
train_data = TensorDataset(X_train, y_train)
test_data = TensorDataset(X_test, y_test)

# Create DataLoaders
train_loader = DataLoader(train_data, batch_size=16, shuffle=True)
test_loader = DataLoader(test_data, batch_size=16, shuffle=False)

import torch.nn as nn

class RNNRegressor(nn.Module):
    def __init__(self, input_dim, hidden_dim):
        super(RNNRegressor, self).__init__()
        self.rnn = nn.RNN(input_dim, hidden_dim, batch_first=True)
        self.fc = nn.Linear(hidden_dim, 1)

    def forward(self, x):
        x, _ = self.rnn(x)
        x = self.fc(x[:, -1, :])  # Using last sequence output
        return x

class LSTMRegressor(nn.Module):
    def __init__(self, input_dim, hidden_dim):
        super(LSTMRegressor, self).__init__()
        self.lstm = nn.LSTM(input_dim, hidden_dim, batch_first=True)
        self.fc = nn.Linear(hidden_dim, 1)

    def forward(self, x):
        x, _ = self.lstm(x)
        x = self.fc(x[:, -1, :])  # Using last sequence output
        return x

def train_model(model, train_loader, criterion, optimizer, num_epochs):
    model.train()
    for epoch in range(num_epochs):
        total_loss = 0.0
        for features, targets in train_loader:
            features = features.unsqueeze(1)  # Add sequence dimension
            optimizer.zero_grad()
            outputs = model(features).squeeze()
            loss = criterion(outputs, targets)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()
        print(f"Epoch {epoch+1}, Loss: {total_loss / len(train_loader)}")

def evaluate_model(model, test_loader, criterion):
    model.eval()
    total_loss = 0.0
    with torch.no_grad():
        for features, targets in test_loader:
            features = features.unsqueeze(1)  # Add sequence dimension
            outputs = model(features).squeeze()
            loss = criterion(outputs, targets)
            total_loss += loss.item()
    return total_loss / len(test_loader)

input_dim = X_train.shape[1]
hidden_dim = 64

# Define the models, optimizers, and loss function
rnn_model = RNNRegressor(input_dim, hidden_dim)
rnn_optimizer = torch.optim.Adam(rnn_model.parameters())
rnn_criterion = nn.MSELoss()

lstm_model = LSTMRegressor(input_dim, hidden_dim)
lstm_optimizer = torch.optim.Adam(lstm_model.parameters())
lstm_criterion = nn.MSELoss()

# Train and evaluate RNN
train_model(rnn_model, train_loader, rnn_criterion, rnn_optimizer, num_epochs=50)
rnn_mse = evaluate_model(rnn_model, test_loader, rnn_criterion)  # Pass criterion here
print(f"RNN Test MSE: {rnn_mse}")

# Train and evaluate LSTM
train_model(lstm_model, train_loader, lstm_criterion, lstm_optimizer, num_epochs=50)
lstm_mse = evaluate_model(lstm_model, test_loader, lstm_criterion)  # Pass criterion here
print(f"LSTM Test MSE: {lstm_mse}")

